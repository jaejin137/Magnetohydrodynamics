average.f:c         p=(gamma-1.d0)*rave_2d(i,j)*eave_2d(i,j)
block.f:      double precision capalpha(nl,nl), capgamma(nl,nl,dim1),
block.f:700       capgamma(i,j,1) = sum
block.f:1000          sum = sum + capb(i,k,iblock) * capgamma(k,j,iblockm1)
block.f:1700          capgamma(i,j,iblock) = sum
block.f:2200        sum = sum + capgamma(i,j,iblock) * soln(j,iblockp1)
block.f:      double precision capalpha(nl,nl), capgamma(nl,nl,dim1),
block.f:700       capgamma(i,j,1) = sum
block.f:1000          sum = sum + capb(i,k,iblock) * capgamma(k,j,iblockm1)
block.f:1700          capgamma(i,j,iblock) = sum
block.f:2200        sum = sum + capgamma(i,j,iblock) * soln(j,iblockp1)
boundary.f:     $     machinf, gamma, angl1, angl2, poutlet,
boundary.f:     $     gamma1,
boundary.f:     $     crm, co2, gammap, cb, tb, pb
boundary.f:      gamma=control%gamma
boundary.f:      gamma1 = gamma-1.d0
boundary.f:               pin = gamma1*(qin(5) -.5d0*(rhou(iin)**2+rhov(iin)**2
boundary.f:               rhoe(iout) = pout/gamma1 + rho(iout)*qqout
boundary.f:                pout = gamma1*(qin(5)-rhotk(iin) -.5d0*
boundary.f:                rhoe(iout) = pout/gamma1 + rhotk(iout)+.5d0*
boundary.f:              pout = gamma1*(qin(5) -.5d0*
boundary.f:              pratio = (ptotal/pout)**(gamma1/gamma) ! = ttotal/t
boundary.f:              mach = dsqrt(2.d0/gamma1*(pratio-1.d0)) ! local mach number
boundary.f:              rho(out) = gamma*machinf*machinf*pout/tout
boundary.f:     $             (tout/(gamma*gamma1*machinf*machinf)+qqout)
boundary.f:c            q(iout,j,k,1) = gamma*machinf**2*rho(iout)/rhoe(iout)
boundary.f:c            temp=gamma/(gamma-1.0)*rho(iout)/q(iout,j,k,1)
boundary.f:c            q(i,iout,k,1) = gamma*machinf**2*rho(iout)/rhoe(iout)
boundary.f:c            temp=gamma/(gamma-1.0)*rho(iout)/q(i,iout,k,1)
boundary.f:c            q(i,j,iout,1) = gamma*machinf**2*rho(iout)/rhoe(iout)
boundary.f:c            temp=gamma/(gamma-1.0)*rho(iout)/q(i,j,iout,1)
boundary.f:               pin = gamma1*(qin(5) -.5d0*(rhou(iin)**2+rhov(iin)**2
boundary.f:               rhoe(iout) = pout/gamma1 + rho(iout)*qqout
boundary.f:              pout = rho(iout)*temp_bnd/(gamma*machinf**2)
boundary.f:              rhoe(iout) = pout/gamma1+qqout
boundary.f:              pout = gamma1*(rhoe(iin)-rho(iin)*qqout)
boundary.f:              rho(iout) = gamma*machinf**2*pout/temp_bnd
boundary.f:              rhoe(iout) = pout/gamma1+qqout*rho(iout)
boundary.f:     $         (ttotal-(gamma-1.d0)*machinf**2*qqout))
boundary.f:     $         **(gamma/(gamma-1.d0))
boundary.f:            rho(iout) = gamma*machinf**2*pout/
boundary.f:     $         (ttotal-(gamma-1.d0)*machinf**2*qqout)
boundary.f:     $         ((ttotal-(gamma-1.d0)*machinf**2*qqout)/
boundary.f:     $         (gamma*(gamma-1.d0)*machinf**2)+qqout)
boundary.f:              rhoe(iout) = poutlet/gamma1 + rho(iout)*theta
boundary.f:              rhoe(iout) = poutlet/gamma1 + 0.5d0*
boundary.f:          pin = gamma1*( rhoe(iin)-rd*theta )
boundary.f:          as2 = gamma*pin/rd
boundary.f:     >              gamma, ronum, p_bar)
boundary.f:          rhoeb = pout/gamma1+rhob*theta
boundary.f:            pout = gamma1*(rhoe(iin)-.5d0*
boundary.f:            rhoe(iout) = pout/gamma1 + .5d0*
boundary.f:                pout = gamma1*(qin(5)-rhotk(iin) -.5d0*
boundary.f:                rhoe(iout) = pout/gamma1 + rhotk(iout)+.5d0*
boundary.f:          pin = gamma1*( rhoe(iin)-rd*theta )
boundary.f:          as2 = gamma*pin/rd
boundary.f:          crm = ud-2.d0*cd/gamma1
boundary.f:          co2 = as2+gamma1*qq
boundary.f:          gammap = gamma+1.d0
boundary.f:          coef = dsqrt( gammap*co2/gamma1-0.5d0*gamma1*crm*crm )
boundary.f:          cb = gamma1/gammap*( coef-crm )
boundary.f:          rhob = gamma*pb/as2
boundary.f:c         rhob = pb*gamma*machinf*machinf/tb
boundary.f:          ub = dsqrt( 2.d0*( ttl-tb )/gamma1/coef )/machinf
boundary.f:          rhoeb = pb/gamma1+rhob*theta
boundary.f:     $             (ttotal-(gamma-1.d0)*machinf**2*qqout))
boundary.f:     $             **(gamma/(gamma-1.d0))
boundary.f:              rho(iout) = gamma*machinf**2*pout/
boundary.f:     $             (ttotal-(gamma-1.d0)*machinf**2*qqout)
boundary.f:     $             ((ttotal-(gamma-1.d0)*machinf**2*qqout)/
boundary.f:     $             (gamma*(gamma-1.d0)*machinf**2)+qqout)
boundary.f:              pout = gamma1*(qin(5) -.5d0*
boundary.f:              pratio = (ptotal/pout)**(gamma1/gamma) ! = ttotal/t
boundary.f:              mach = dsqrt(2.d0/gamma1*(pratio-1.d0)) ! local mach number
boundary.f:              rho(out) = gamma*machinf*machinf*pout/tout
boundary.f:     $             (tout/(gamma*gamma1*machinf*machinf)+qqout)
boundary.f:          pout = gamma1*(qout(5) -.5d0*
boundary.f:            rhoe(iout) = pout/gamma1 + .5d0*
boundary.f:            pin = gamma1*( rhoe(iin)-rho(iin)*qqout )
boundary.f:            dxp = 1.d0/gamma1 + coef*qqout
boundary.f:            pout = gamma1*( rhoe(iout)-rho(iout)*qqout )
boundary.f:c              pout = rho(iout)*control%t(bcindex-100)/(gamma*machinf**2)
boundary.f:c              rhoe(iout) = pout/gamma1+qqout
boundary.f:              pout = gamma1*(rhoe(iin)-rho(iin)*qqout)
boundary.f:              rho(iout) = gamma*machinf**2*pout/control%t(bcindex-100)
boundary.f:              rhoe(iout) = pout/gamma1+qqout*rho(iout)
cdltj.f:      subroutine modforce(nmode, il, jl, kl, nl, x, y, z, q, gamma,
cdltj.f:     $     gamma,
cdltj.f:     $     gamma1, r, u, v, w, et, p1, p0, pfx, pfy, pfz, sum,
cdltj.f:      gamma1 = gamma - 1.d0
cdltj.f:        p1 = gamma1*( et-0.5d0*r*( u*u+v*v+w*w ) )
cdltj.f:        p0 = gamma1*( et-0.5d0*r*( u*u+v*v+w*w ) )
cldm.f:      double precision:: machinf, reynolds, gamma
cldm.f:      gamma=control%gamma
cldm.f:            p = (gamma-1.d0)*q(i,j,k,5)
cldm.f:            t = gamma * (machinf**2) * p * ri
initflow.f:     $     tintvl, gamma, machinf
initflow.f:      gamma=control%gamma
initflow.f:                     qiii(i,j,k,1)=(gamma-1.0)*
initflow.f:                     qiii(i,j,k,5)=qiii(i,j,k,1)*gamma*
integ_nri_GS.f:      subroutine integ_nri_GS(gamma, x, y, z, vol, q, q_n,
integ_nri_GS.f:     $     gamma,
integ_nri_GS.f:     $     gamma1,
integ_nri_GS.f:      gamma1 = gamma - 1.d0
integ_nri_GS.f:     $            gamma, q, mx2)
integ_nri_GS.f:     $              gamma, q, bm, poutlet, mx2, sigma)
integ_nri_GS.f:     $            gamma, q, bm, pinlet, machinf, ptotal, ttotal,
integ_nri_GS.f:        call urs_nri(dt, x, y, z, q, q_n, q_bi, gamma, iter_gs, rhsbi,
integ_nri_GS.f:          p = gamma1*(q(i,j,k,5) - 0.5d0 * (q(i,j,k,2)**2 +
integ_nri_GS.f:          p = gamma1*( q(i,j,k,5)-0.5d0*( q(i,j,k,2)**2 +
integ_nrj_GS.f:      subroutine integ_nrj_GS(gamma, x, y, z, vol, q, q_n,
integ_nrj_GS.f:     $     gamma,
integ_nrj_GS.f:     $     gamma1,
integ_nrj_GS.f:      gamma1 = gamma - 1.d0
integ_nrj_GS.f:     $                gamma, q, bm, poutlet, mx2)
integ_nrj_GS.f:     $                 gamma, q, bm, poutlet, mx2)
integ_nrj_GS.f:      call urs_nrj(dt, x, y, z, q, q_n, q_bj, gamma, iter_gs, rhsbj,
integ_nrj_GS.f:          p = gamma1*(q(i,j,k,5) - 0.5d0 * (q(i,j,k,2)**2 +
integ_nrj_GS.f:          p = gamma1*(q(i,j,k,5) - 0.5d0 * (q(i,j,k,2)**2 +
integ_nrj_GS.f:          p = gamma1*( q(i,j,k,5)-0.5d0*( q(i,j,k,2)**2 +
integ_nrj_GS.f:          p = gamma1*( q(i,j,k,5)-0.5d0*( q(i,j,k,2)**2 +
integrate_ALL.f:     $     gamma,
integrate_ALL.f:     $     gamma1,
integrate_ALL.f:      gamma=control%gamma
integrate_ALL.f:      gamma1 = gamma - 1.d0
integrate_ALL.f:     $           q, flux, gamma, tref, prandtl, rhs,
integrate_ALL.f:             constant=gamma*machinf*machinf
integrate_ALL.f:                  p=(gamma-1.0)*(q(i,j,k,5)-r*vel)
integrate_ALL.f:                  t=gamma*machinf**2*p/r
integrate_ALL.f:                  c=sqrt((gamma-1.0)*(th-vel))
integrate_ALL.f:                  drhodp=gamma/c**2
integrate_ALL.f:                  cp=c**2/((gamma-1.0)*t)
integrate_ALL.f:                  cp=1.d0/((gamma-1.0)*machinf**2)
integrate_ALL.f:                  q(i,j,k,5) = qiii(i,j,k,1)/(gamma-1.0)+
integrate_ALL.f:              constant=gamma*machinf*machinf
integrate_ALL.f:                     q(i,j,k,5) = qiii(i,j,k,1)/(gamma-1.0)+
integrate_ALL.f:      call negative(il, jl, kl, nl, q, gamma,
integrate_ALL.f:        dtemp = ( 1.d0+0.5d0*gamma1*machinf*machinf )**3.5d0
integrate_ALL.f:        call integ_nri_GS(gamma, x, y, z, vol, q, q_n,
integrate_ALL.f:        dtemp = ( 1.d0+0.5d0*gamma1*machinf*machinf )**3.5d0
integrate_ALL.f:        call integ_nrj_GS(gamma, x, y, z, vol, q, q_n,
integrate_ALL.f:        dtemp = ( 1.d0+0.5d0*gamma1*machinf*machinf )**3.5d0
integrate_ALL.f:        call integ_nri_GS(gamma, x, y, z, vol, q, q_n,
integrate_ALL.f:        call integ_nrj_GS(gamma, x, y, z, vol, q, q_n,
invert.f:     $     gamma, tref, prandtl, rhs, x, y, z, vol, il, jl, kl, nl,
invert.f:     $     gamma,
invert.f:      gamma=control%gamma
invsid_flux.f:     $     gamma, tref,prandtl,prt,reynolds, k_prec,
invsid_flux.f:      gamma=control%gamma
invsid_flux.f:            c_l = dsqrt(gamma*pl(i)/rhol(i))*area_
invsid_flux.f:            c_r = dsqrt(gamma*pr(i)/rhor(i))*area_
isr_nri.f:     $               gamma, q, bm, pinlet, machinf, ptotal, ttotal,
isr_nri.f:     $     gamma, pinlet, machinf, ptotal, ttotal, mx2, sigma(2),
isr_nri.f:     $     gamma1, rr, uu, vv, ww, qq, pp, psh,
isr_nri.f:      gamma1 = gamma - 1.d0
isr_nri.f:        pv(5,l) = gamma1 * ( q(i,j,k,5) - pv(1,l) * qq )
isr_nri.f:        psh = ptotal*( 1.d0-gamma1*qq*machinf*machinf/ttotal )
isr_nri.f:      call gdinl(gamma, xix, xiy, xiz, jcb, bxi, pv, pvpxi,
isr_nri.f:     >        vv * dxi(3) + ww * dxi(4) ) + dxi(5) / gamma1
isr_nri.f:     $               gamma, q, am, pinlet, machinf, ptotal, ttotal,
isr_nri.f:     $     gamma, pinlet, machinf, ptotal, ttotal, mx2, sigma(2),
isr_nri.f:     $     gamma1, rr, uu, vv, ww, qq, pp, cc, psh,
isr_nri.f:      gamma1 = gamma - 1.d0
isr_nri.f:        pv(5,l) = gamma1 * ( q(i,j,k,5) - pv(1,l) * qq )
isr_nri.f:      cc = dsqrt(gamma*pp/rr)
isr_nri.f:        psh = ptotal*( 1.d0-gamma1*qq*machinf*machinf/ttotal )
isr_nri.f:      call gdinl(gamma, xix, xiy, xiz, jcb, bxi, pv, pvpxi,
isr_nri.f:     >          pdpv(5,1)/gamma1
isr_nri.f:     >          pdpv(5,2)/gamma1
isr_nri.f:     >          pdpv(5,3)/gamma1
isr_nri.f:     >          pdpv(5,4)/gamma1
isr_nri.f:     >          pdpv(5,5)/gamma1
isr_nri.f:      subroutine gdinl(gamma, xix, xiy, xiz, jcb, bxi, pv, pvpxi,
isr_nri.f:     $     gamma, xix, xiy, xiz, jcb, bxi, pv(5,3), pvpxi(5),
isr_nri.f:     $     gamma1, rr, uu, vv, ww, pp, c2, cc, dpc, capu,
isr_nri.f:      gamma1 = gamma - 1.d0
isr_nri.f:      c2 = gamma * pp / rr
isr_nri.f:      pppv(1) =  0.5d0*gamma1*qq
isr_nri.f:      pppv(2) = -gamma1*uu
isr_nri.f:      pppv(3) = -gamma1*vv
isr_nri.f:      pppv(4) = -gamma1*ww
isr_nri.f:      pppv(5) =  gamma1
isr_nri.f:      c2 = gamma * pp / rr
isr_nrj.f:     $                  gamma, q, bm, poutlet, mx2)
isr_nrj.f:     $     gamma, poutlet, mx2,
isr_nrj.f:     $     gamma1, rr, uu, vv, ww, qq, pp,
isr_nrj.f:      gamma1 = gamma - 1.d0
isr_nrj.f:        pv(5,l) = gamma1 * ( q(i,j,k,5) - pv(1,l) * qq )
isr_nrj.f:        call gdwall(gamma, xix, xiy, xiz, jcb, bxi, pv,
isr_nrj.f:        call gdsdl(gamma, xix, xiy, xiz, jcb, bxi, pv,
isr_nrj.f:     >        vv * dxi(3) + ww * dxi(4) ) + dxi(5) / gamma1
isr_nrj.f:     $                  gamma, q, am, poutlet, mx2)
isr_nrj.f:     $     gamma, poutlet, mx2,
isr_nrj.f:     $     gamma1, rr, uu, vv, ww, qq, pp, cc,
isr_nrj.f:      gamma1 = gamma - 1.d0
isr_nrj.f:        pv(5,l) = gamma1 * ( q(i,j,k,5) - pv(1,l) * qq )
isr_nrj.f:      cc = dsqrt(gamma*pp/rr)
isr_nrj.f:        call gdwall(gamma, xix, xiy, xiz, jcb, bxi, pv,
isr_nrj.f:        call gdsdl(gamma, xix, xiy, xiz, jcb, bxi, pv,
isr_nrj.f:     >          pdpv(5,1)/gamma1
isr_nrj.f:     >          pdpv(5,2)/gamma1
isr_nrj.f:     >          pdpv(5,3)/gamma1
isr_nrj.f:     >          pdpv(5,4)/gamma1
isr_nrj.f:     >          pdpv(5,5)/gamma1
isr_nrj.f:      subroutine gdsdl(gamma, xix, xiy, xiz, jcb, bxi, pv, pvpxi,
isr_nrj.f:     $     gamma, xix, xiy, xiz, jcb, bxi, pv(5,3), pvpxi(5),
isr_nrj.f:     $     gamma1, rr, uu, vv, ww, pp, c2, cc, capu,
isr_nrj.f:      gamma1 = gamma - 1.d0
isr_nrj.f:        c2 = gamma * pp / rr
isr_nrj.f:        c2 = gamma * pp / rr
isr_nrj.f:        c2 = gamma * pp / rr
isr_nrj.f:        c2 = gamma * pp / rr
journal.f:     $    gamma,
journal.f:        namelist /consts/ delta, epsfactor, gamma, prandtl, prt,
kw_wall.f:     $     bc_zeta_upper, reynolds, machinf, suther, tref, gamma,
kw_wall.f:     $     gamma,
kw_wall.f:                  call wall_func(reynolds, machinf, suther, tref, gamma,
kw_wall.f:                  call wall_func(reynolds, machinf, suther, tref, gamma,
kw_wall.f:                  call wall_func(reynolds, machinf, suther, tref, gamma,
lhs_matrix.f:     $     gamma,
lhs_matrix.f:     $     c1,  gamma1
lhs_matrix.f:      gamma=control%gamma
lhs_matrix.f:      gamma1 = gamma - 1.d0
lhs_matrix.f:      c1    = 2.d0 - gamma
lhs_matrix.f:c     $     q, gamma, machinf, kupper, ptotal, ttotal, angl1, angl2,
lhs_matrix.f:                p(i) = gamma1*( rhoe(i)-rho(i)*theta )
lhs_matrix.f:                p(i) = gamma1*( rhoe(i)-rho(i)*qq(i) )
lhs_matrix.f:               p(i) = gamma1 * (rhoe(i)-rhotk(i)-rho(i)*qq(i))
lhs_matrix.f:                 p(i) = gamma1*( rhoe(i)-rho(i)*theta )
lhs_matrix.f:                 p(i) = gamma1*( rhoe(i)-rho(i)*qq(i) )
lhs_matrix.f:            t(i) = p(i) * gamma * machinf * machinf / rho(i)
lhs_matrix.f:               tl(i)=gamma*machinf**2*pl(i)/rhol(i)
lhs_matrix.f:               cl=sqrt((gamma-1.0)*(tenthalpyl(i)-ql(i)))
lhs_matrix.f:               drhodpl(i)=gamma/cl**2
lhs_matrix.f:               cpl(i)=cl**2/((gamma-1.0)*tl(i))
lhs_matrix.f:               cpl(i)=1.d0/((gamma-1.0)*machinf**2)
lhs_matrix.f:               tr(i)=gamma*machinf**2*pr(i)/rhor(i)
lhs_matrix.f:               cr=sqrt((gamma-1.0)*(tenthalpyr(i)-qr(i)))
lhs_matrix.f:               drhodpr(i)=gamma/cr**2
lhs_matrix.f:               cpr(i)=cr**2/((gamma-1.0)*tr(i))
lhs_matrix.f:               cpr(i)=1.d0/((gamma-1.0)*machinf**2)
lhs_matrix.f:         glx(i) = gamma1*llx(i)
lhs_matrix.f:         gly(i) = gamma1*lly(i)
lhs_matrix.f:         glz(i) = gamma1*llz(i)
lhs_matrix.f:            al(i,5,1) = -gamma*capvell(i)*el(i) + 
lhs_matrix.f:     >           gamma1*capvell(i)*(2.d0*ql(i)+tkl(i))
lhs_matrix.f:            ar(i,5,1) = -gamma*capvelr(i)*er(i) + 
lhs_matrix.f:     >           gamma1*capvelr(i)*(2.d0*qr(i)+tkr(i))
lhs_matrix.f:               al(i,5,6) = -gamma1*capvell(i)
lhs_matrix.f:               ar(i,5,6) = -gamma1*capvelr(i)
lhs_matrix.f:         glx(i) = gamma1*llx(i)
lhs_matrix.f:         gly(i) = gamma1*lly(i)
lhs_matrix.f:         glz(i) = gamma1*llz(i)
lhs_matrix.f:            al(i,5,1) = -gamma*capvell(i)*el(i) + 
lhs_matrix.f:     >           gamma1*capvell(i)*(2.d0*ql(i)+tkl(i))
lhs_matrix.f:            ar(i,5,1) = -gamma*capvelr(i)*er(i) + 
lhs_matrix.f:     >           gamma1*capvelr(i)*(2.d0*qr(i)+tkr(i))
lhs_matrix.f:            al(i,5,1) = -gamma*capvell(i)*el(i) + 
lhs_matrix.f:     >           2.d0*gamma1*capvell(i)*ql(i)
lhs_matrix.f:            ar(i,5,1) = -gamma*capvelr(i)*er(i) + 
lhs_matrix.f:     >           2.d0*gamma1*capvelr(i)*qr(i)
lhs_matrix.f:         al(i,5,2) = -gamma1*capvell(i)*ul(i) + llx(i)*tenthalpyl(i)
lhs_matrix.f:         ar(i,5,2) = -gamma1*capvelr(i)*ur(i) + llx(i)*tenthalpyr(i)
lhs_matrix.f:         al(i,5,3) = -gamma1*capvell(i)*vl(i) + lly(i)*tenthalpyl(i)
lhs_matrix.f:         ar(i,5,3) = -gamma1*capvelr(i)*vr(i) + lly(i)*tenthalpyr(i)
lhs_matrix.f:         al(i,5,4) = -gamma1*capvell(i)*wl(i) + llz(i)*tenthalpyl(i)
lhs_matrix.f:         ar(i,5,4) = -gamma1*capvelr(i)*wr(i) + llz(i)*tenthalpyr(i)
lhs_matrix.f:         al(i,5,5) = gamma*capvell(i)
lhs_matrix.f:         ar(i,5,5) = gamma*capvelr(i)
lhs_matrix.f:               al(i,5,6) = -gamma1*capvell(i)
lhs_matrix.f:               ar(i,5,6) = -gamma1*capvelr(i)
lhs_matrix.f:     >        delta, gamma, ul, ur, vl, vr, wl, wr,rhol, rhor, 
lhs_matrix.f:            c_l = dsqrt(gamma*pl(i)/rhol(i))
lhs_matrix.f:            c_r = dsqrt(gamma*pr(i)/rhor(i))
lhs_matrix.f:            call van_leer_matrix(gamma,nl,vx1,vy1,vz1,c_l,d_l,u_l,v_l,
lhs_matrix.f:               c=sqrt((gamma-1.0)*(tenthalpyr(i)-qq(i)))
lhs_matrix.f:               drhodpr(i)=gamma/c**2
lhs_matrix.f:               cpr(i)=c**2/((gamma-1.0)*t(i))
lhs_matrix.f:               cpr(i)=1.d0/((gamma-1.0)*machinf**2)
lhs_matrix.f:      coeff2 = 1.d0/(gamma1*machinf*machinf) ! Cp
lhs_matrix.f:      coeff3 = gamma*gamma1*machinf*machinf 
lhs_matrix.f:c     ZERO OUT gammabc before defining it
lu_sgs.f:     $     gamma, prandtl, prt, tref, ptotal, ttotal,
lu_sgs.f:      gamma=control%gamma
lu_ursn.f:     $     gamma, prandtl, prt, tref, ptotal, ttotal,
lu_ursn.f:      gamma=control%gamma
lu_ursn.f:        gam1=gamma-1.
lu_ursn.f:        gam2=2.-gamma
lu_ursn.f:                 t0 = p0 * gamma * machinf * machinf / r0
lu_ursn_gs.f:     $     gamma, prandtl, prt, tref, ptotal, ttotal,
lu_ursn_gs.f:      gamma=control%gamma
lu_ursn_gs.f:        gam1=gamma-1.
lu_ursn_gs.f:        gam2=2.-gamma
lu_ursn_gs.f:                 t0 = p0 * gamma * machinf * machinf / r0
main.f:     $     gamma,               ! specific heat ratio
main.f:      namelist /consts/ suther, gamma, prandtl, prt, tref,
main.f:      control%gamma=gamma
main.f:c    $           x0,y0,q0,gamma,dual_t)
main.f:     $         x0,y0,q0,gamma,dual_t)
main.f:     $                 gamma, machinf, udj0, vdj0, wdj0, vol0)
mass_flow.f:     $           gamma, machinf, udj, vdj, wdj, vol)
mass_flow.f:     $     time, gamma, machinf,
mass_flow.f:     $     gamma1, summ, sump, sumt, sumpt, sumtt, sumru, sumv,
mass_flow.f:      gamma1 = gamma-1.d0
mass_flow.f:      cf1 = gamma*machinf*machinf
mass_flow.f:          p = gamma1*( et-r*theta )
mass_flow.f:          as = gamma*p*ri
mass_flow.f:          coef = 1.d0+gamma1*mach2
mass_flow.f:          p = gamma1*( et-r*theta )
mass_flow.f:          as = gamma*p*ri
mass_flow.f:          coef = 1.d0+gamma1*mach2
mass_flow.f:          p = gamma1*( et-r*theta )
mass_flow.f:          as = gamma*p*ri
mass_flow.f:          coef = 1.d0+gamma1*mach2
mass_flow.f:      at1 = gamma1/gamma
mass_flow.f:      at2 = gamma/gamma1
mass_flow.f:     $           gamma, ronum, p_bar)
mass_flow.f:     $     gamma, ronum
mass_flow.f:     $     gamma1, vw, ww, yct, zct
mass_flow.f:      gamma1 = gamma-1.d0
mass_flow.f:          p = gamma1*( et-r*theta )
mass_flow.f:          p = gamma1*( et-r*theta )
matrix_bnd.f:     $     gamma,               ! specific heat ratio
matrix_bnd.f:     $     gammabc
matrix_bnd.f:     $     gamma1,              ! gamma - 1
matrix_bnd.f:      gamma=control%gamma
matrix_bnd.f:      gamma1= gamma - 1.d0
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:               gammabc(ii,ii) = 1.d0
matrix_bnd.f:            gammabc(1,1)=0.
matrix_bnd.f:               gammabc(5,5) =  poutlet/
matrix_bnd.f:     $            ((gamma-1.0)*(rhoe(n)-rho(n)*qq(n)))
matrix_bnd.f:            if(nl.eq.7.and.ke) gammabc(5,6) = 1.d0
matrix_bnd.f:     $           capa(:,:,n) + matmul(capb(:,:,n),gammabc)
matrix_bnd.f:     $           capa(:,:,n) + matmul(capc(:,:,n),gammabc)
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:            gammabc(1,1) = 1.d0
matrix_bnd.f:                gammabc(5,1) = gamma*machinf**2/qconer(1,num)
matrix_bnd.f:            if(nl.eq.7.and.ke) gammabc(5,6) = -1.d0
matrix_bnd.f:     $           capa(:,:,n) + matmul(capb(:,:,n),gammabc)
matrix_bnd.f:     $           capa(:,:,n) + matmul(capc(:,:,n),gammabc)
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:            gammabc(1,1) =  1.d0
matrix_bnd.f:            gammabc(2,2) = -1.d0
matrix_bnd.f:            gammabc(3,3) = -1.d0
matrix_bnd.f:            gammabc(4,4) = -1.d0
matrix_bnd.f:            gammabc(5,5) =  1.d0
matrix_bnd.f:           if (nl.eq.6) gammabc(6,6) = -1.d0
matrix_bnd.f:     >           capa(:,:,n) + matmul( capb(:,:,n), gammabc(:,:) )
matrix_bnd.f:     >           capa(:,:,n) + matmul( capc(:,:,n), gammabc(:,:) )
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:            gammabc(1,1) =  1.d0
matrix_bnd.f:            gammabc(2,2) = -1.d0
matrix_bnd.f:            gammabc(3,3) = -1.d0
matrix_bnd.f:            gammabc(4,4) = -1.d0
matrix_bnd.f:            gammabc(5,5) =  0.d0
matrix_bnd.f:           if (nl.eq.6) gammabc(6,6) = -1.d0
matrix_bnd.f:     >           capa(:,:,n) + matmul( capb(:,:,n), gammabc(:,:) )
matrix_bnd.f:     >           capa(:,:,n) + matmul( capc(:,:,n), gammabc(:,:) )
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:               gammabc(ii,ii) = 1.d0
matrix_bnd.f:              gammabc(2,2) = -1.d0
matrix_bnd.f:              gammabc(3,3) = -1.d0
matrix_bnd.f:              gammabc(4,4) = -1.d0
matrix_bnd.f:     $           capa(:,:,n) + matmul(capb(:,:,n),gammabc)
matrix_bnd.f:     $           capa(:,:,n) + matmul(capc(:,:,n),gammabc)
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:                  k4 = -0.5*(gamma-1.0)*machinf**2
matrix_bnd.f:                  k3 = k4*ptotal*t(n)**(1.0/gamma1)/(t(n)**(1.0/gamma1))
matrix_bnd.f:                  gammabc(1,2) = k3*u(nbnd)
matrix_bnd.f:                  gammabc(2,2) = 1.0d0
matrix_bnd.f:                  gammabc(3,2) = k1
matrix_bnd.f:                  gammabc(4,2) = k2
matrix_bnd.f:                  gammabc(5,2) = k4*u(nbnd)
matrix_bnd.f:                  gammabc(1,3) = k3*v(nbnd)
matrix_bnd.f:                  gammabc(2,3) = k1
matrix_bnd.f:                  gammabc(3,3) = 1.0d0
matrix_bnd.f:                  gammabc(4,3) = k2
matrix_bnd.f:                  gammabc(5,3) = k4*v(nbnd)
matrix_bnd.f:                  gammabc(1,4) = k3*w(nbnd)
matrix_bnd.f:                  gammabc(2,4) = k1
matrix_bnd.f:                  gammabc(3,4) = k2
matrix_bnd.f:                  gammabc(4,4) = 1.0d0
matrix_bnd.f:                  gammabc(5,4) = k4*w(nbnd)
matrix_bnd.f:               gammabc = 0.0
matrix_bnd.f:                  gammabc(6,ii) = rhotk(nbnd)/rho(nbnd)*H/rho(n)
matrix_bnd.f:                  gammabc(6,ii) = rhotk(nbnd)/rho(nbnd)*H/rho(n)
matrix_bnd.f:                  gammabc(7,ii) = rhotw(nbnd)/rho(nbnd)*H/rho(n)
matrix_bnd.f:     $           capa(:,:,n) + matmul(capb(:,:,n),gammabc)
matrix_bnd.f:     $           capa(:,:,n) + matmul(capc(:,:,n),gammabc)
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:               gammabc(ii,ii) = 1.d0
matrix_bnd.f:            gammabc(1,1) = 0.d0
matrix_bnd.f:            gammabc(5,5) =  (qconer(5,num)-
matrix_bnd.f:            if(nl.eq.7.and.ke) gammabc(5,6) = 1.d0
matrix_bnd.f:     $           capa(:,:,n) + matmul(capb(:,:,n),gammabc)
matrix_bnd.f:     $           capa(:,:,n) + matmul(capc(:,:,n),gammabc)
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:            gammabc(1,1) =  1.d0
matrix_bnd.f:            gammabc(2,2) = -1.d0
matrix_bnd.f:            gammabc(3,3) = -1.d0
matrix_bnd.f:            gammabc(4,4) = -1.d0
matrix_bnd.f:            gammabc(5,5) =  0.d0
matrix_bnd.f:           if (nl.eq.6) gammabc(6,6) = -1.d0
matrix_bnd.f:     >           capa(:,:,n) + matmul( capb(:,:,n), gammabc(:,:) )
matrix_bnd.f:     >           capa(:,:,n) + matmul( capc(:,:,n), gammabc(:,:) )
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:               gammabc(ii,ii) = 1.d0
matrix_bnd.f:            gammabc(5,1) = -qq(n)
matrix_bnd.f:            gammabc(5,2) =  u(n)
matrix_bnd.f:            gammabc(5,3) =  v(n)
matrix_bnd.f:            gammabc(5,4) =  w(n)
matrix_bnd.f:            gammabc(5,5) =  0.d0
matrix_bnd.f:            if(nl.eq.7.and.ke) gammabc(5,6) = 1.d0
matrix_bnd.f:     $           capa(:,:,n) + matmul(capb(:,:,n),gammabc)
matrix_bnd.f:     $           capa(:,:,n) + matmul(capc(:,:,n),gammabc)
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:            gammabc(5,1) = qq(n)
matrix_bnd.f:            gammabc(5,2) = -u(n)
matrix_bnd.f:            gammabc(5,3) = -v(n)
matrix_bnd.f:            gammabc(5,4) = -w(n)
matrix_bnd.f:            gammabc(5,5) = 1.d0
matrix_bnd.f:            if(nl.eq.7.and.ke) gammabc(5,6) = -1.d0
matrix_bnd.f:     $           capa(:,:,n) + matmul(capb(:,:,n),gammabc)
matrix_bnd.f:     $           capa(:,:,n) + matmul(capc(:,:,n),gammabc)
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:            gammabc(1,1) =  1.d0
matrix_bnd.f:            gammabc(2,2) = -1.d0
matrix_bnd.f:            gammabc(3,3) = -1.d0
matrix_bnd.f:            gammabc(4,4) = -1.d0
matrix_bnd.f:            gammabc(5,5) =  1.d0
matrix_bnd.f:            gammabc(3,1) = 2.d0*vm
matrix_bnd.f:            gammabc(4,1) = 2.d0*wm
matrix_bnd.f:           if (nl.eq.6) gammabc(6,6) = -1.d0
matrix_bnd.f:     >           capa(:,:,n) + matmul( capb(:,:,n), gammabc(:,:) )
matrix_bnd.f:     >           capa(:,:,n) + matmul( capc(:,:,n), gammabc(:,:) )
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:            gammabc(1,1) =  1.d0
matrix_bnd.f:            gammabc(2,2) = -1.d0
matrix_bnd.f:            gammabc(3,3) = -1.d0
matrix_bnd.f:            gammabc(4,4) = -1.d0
matrix_bnd.f:            gammabc(5,5) =  0.d0
matrix_bnd.f:           if (nl.eq.6) gammabc(6,6) = -1.d0
matrix_bnd.f:     >           capa(:,:,n) + matmul( capb(:,:,n), gammabc(:,:) )
matrix_bnd.f:     >           capa(:,:,n) + matmul( capc(:,:,n), gammabc(:,:) )
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:               gammabc(ii,ii) = 1.d0
matrix_bnd.f:              gammabc(2,2) = -1.d0
matrix_bnd.f:              gammabc(3,3) = -1.d0
matrix_bnd.f:              gammabc(4,4) = -1.d0
matrix_bnd.f:     $           capa(:,:,n) + matmul(capb(:,:,n),gammabc)
matrix_bnd.f:     $           capa(:,:,n) + matmul(capc(:,:,n),gammabc)
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:     $              (ttotal-.5d0*(gamma-1.d0)*machinf**2*(vel*kcoef)**2)
matrix_bnd.f:               gammabc(1,ii) = H/rho(n)
matrix_bnd.f:               gammabc(ii,ii) = (H*vel+rho(nbnd))/rho(n)
matrix_bnd.f:                  gammabc(3,ii) = k1*gammabc(ii,ii)
matrix_bnd.f:                  gammabc(4,ii) = k2*gammabc(ii,ii)
matrix_bnd.f:                  gammabc(2,ii) = k1*gammabc(ii,ii)
matrix_bnd.f:                  gammabc(4,ii) = k2*gammabc(ii,ii)
matrix_bnd.f:                  gammabc(2,ii) = k1*gammabc(ii,ii)
matrix_bnd.f:                  gammabc(3,ii) = k2*gammabc(ii,ii)
matrix_bnd.f:               gammabc(5,ii) = (H*rhoe(nbnd)/rho(nbnd)
matrix_bnd.f:     $              +rho(nbnd)*kcoef**2*vel*(gamma-1.d0)/gamma)/rho(n)
matrix_bnd.f:                  gammabc(6,ii) = rhotk(nbnd)/rho(nbnd)*H/rho(n)
matrix_bnd.f:                  gammabc(6,ii) = rhotk(nbnd)/rho(nbnd)*H/rho(n)
matrix_bnd.f:                  gammabc(7,ii) = rhotw(nbnd)/rho(nbnd)*H/rho(n)
matrix_bnd.f:               gammabc(:,1) = -vel*gammabc(:,ii)
matrix_bnd.f:               pratio = (ptotal/p(nbnd))**((gamma-1.d0)/gamma)
matrix_bnd.f:               mach = dsqrt(2.d0/(gamma-1.d0)*(pratio-1.d0))
matrix_bnd.f:               p_coef = (gamma-1.d0)*p_coef
matrix_bnd.f:               dprdp = ptotal**((1.d0-gamma)/gamma)
matrix_bnd.f:     $              *(gamma-1.d0)/gamma*p(nbnd)**(-1.d0/gamma)
matrix_bnd.f:               vel_coef = dsqrt(ttotal*2.d0/(gamma-1.d0))/machinf/kcoef
matrix_bnd.f:               e_coef = -ttotal/(gamma*machinf*machinf)*dprdp
matrix_bnd.f:               gammabc(1,:) = rho_coef*p_coef
matrix_bnd.f:               gammabc(5,:) =
matrix_bnd.f:                  gammabc(2,:) = vel_coef*p_coef
matrix_bnd.f:                  gammabc(3,:) = k1*gammabc(2,:)
matrix_bnd.f:                  gammabc(4,:) = k2*gammabc(2,:)
matrix_bnd.f:                  gammabc(3,:) = vel_coef*p_coef
matrix_bnd.f:                  gammabc(2,:) = k1*gammabc(3,:)
matrix_bnd.f:                  gammabc(4,:) = k2*gammabc(3,:)
matrix_bnd.f:                  gammabc(4,:) = vel_coef*p_coef
matrix_bnd.f:                  gammabc(2,:) = k1*gammabc(4,:)
matrix_bnd.f:                  gammabc(3,:) = k2*gammabc(4,:)
matrix_bnd.f:     $           capa(:,:,n) + matmul(capb(:,:,n),gammabc)
matrix_bnd.f:     $           capa(:,:,n) + matmul(capc(:,:,n),gammabc)
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:            gammabc(1,1) =  c0
matrix_bnd.f:            gammabc(1,5) = -c1
matrix_bnd.f:            gammabc(2,2) = -c0
matrix_bnd.f:            gammabc(2,5) =  c1*u(n)
matrix_bnd.f:            gammabc(3,3) = -c0
matrix_bnd.f:            gammabc(3,5) =  c1*v(n)
matrix_bnd.f:            gammabc(4,4) = -c0
matrix_bnd.f:            gammabc(4,5) =  c1*w(n)
matrix_bnd.f:     >           capa(:,:,n) + matmul(capb(:,:,n),gammabc)
matrix_bnd.f:     >           capa(:,:,n) + matmul(capc(:,:,n),gammabc)
matrix_bnd.f:              gammabc = 0.d0
matrix_bnd.f:              gammabc(1,1) = 1.d0
matrix_bnd.f:              gammabc(2,2) = 1.d0
matrix_bnd.f:              gammabc(3,2) = k1
matrix_bnd.f:              gammabc(4,2) = k2
matrix_bnd.f:     >           capa(:,:,n) + matmul(capb(:,:,n),gammabc)
matrix_bnd.f:     >           capa(:,:,n) + matmul(capc(:,:,n),gammabc)
matrix_bnd.f:            gammabc = 0.d0
matrix_bnd.f:            gammabc(1,1) =  1.d0
matrix_bnd.f:            gammabc(2,2) = -1.d0
matrix_bnd.f:            gammabc(3,3) = -1.d0
matrix_bnd.f:            gammabc(4,4) = -1.d0
matrix_bnd.f:            gammabc(5,5) =  0.d0
matrix_bnd.f:           if (nl.eq.6) gammabc(6,6) = -1.d0
matrix_bnd.f:     >           capa(:,:,n) + matmul( capb(:,:,n), gammabc(:,:) )
matrix_bnd.f:     >           capa(:,:,n) + matmul( capc(:,:,n), gammabc(:,:) )
mcontrol.f:     $ gamma,
moving_grid.f:     $     gamma,
moving_grid.f:      gamma=control%gamma
moving_grid.f:          call modforce(nmode, il, jl, kl, nl, x, y, z, q, gamma,
negative.f:      subroutine negative(il, jl, kl, nl, q, gamma,
negative.f:     $     gamma, ronum
negative.f:     $     gamma1, psi, qq, theta,
negative.f:      gamma1 = gamma-1.d0
negative.f:              p = gamma1*( q(i,j,k,5)-q(i,j,k,1)*theta )
negative.f:              p = gamma1*( q(i,j,k,5)-0.5d0*(q(i,j,k,2)**2 +
reconstruct.f:     $     gamma, machinf,
reconstruct.f:      gamma=control%gamma
reconstruct.f:              pl(i) = (gamma-1.d0)*(rhoel(i)-rhotkl(i)-rhol(i)*ql(i))
reconstruct.f:              pr(i) = (gamma-1.d0)*(rhoer(i)-rhotkr(i)-rhor(i)*qr(i))
reconstruct.f:          pl(i) = (gamma-1.d0)*( rhoel(i) - rhol(i)*thetal )
reconstruct.f:          pr(i) = (gamma-1.d0)*( rhoer(i) - rhor(i)*thetar )
reconstruct.f:          pl(i) = (gamma-1.d0)*(rhoel(i) - rhol(i)*ql(i))
reconstruct.f:          pr(i) = (gamma-1.d0)*(rhoer(i) - rhor(i)*qr(i))
reconstruct.f:              pl(i) = (gamma-1.d0)*(rhoel(i)-rhotkl(i)-rhol(i)*ql(i))
reconstruct.f:              pr(i) = (gamma-1.d0)*(rhoer(i)-rhotkr(i)-rhor(i)*qr(i))
reconstruct.f:        tl(i)=gamma*machinf**2*pl(i)/rhol(i)
reconstruct.f:        tr(i)=gamma*machinf**2*pr(i)/rhor(i)
record_p.f:     $     iupper, jlower, jupper, klower, kupper, x, y, q, gamma,
record_p.f:     $     gamma,
record_p.f:      pin = (gamma-1.d0)*(q(1,1:jl,1,5)-0.5d0*r*(u*u+v*v))
record_p.f:      psurl = (gamma-1.d0)*
record_p.f:      psuru = (gamma-1.d0)*
rhside.f:     $     gamma,
rhside.f:     $     coeff1, coeff2, gamma1,
rhside.f:      gamma=control%gamma
rhside.f:      gamma1 = gamma - 1.d0
rhside.f:      coeft = gamma*gamma1*machinf*machinf
rhside.f:            t0(:,:,:) = gamma * gamma1 * machinf * machinf
rhside.f:              t0(:,:,:) = gamma*gamma1*machinf*machinf*
rhside.f:                t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:            coeff2 = 1.d0/(gamma1*machinf*machinf)
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:              coeff2 = 1.d0/(gamma1*machinf*machinf)
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:                  t0(i,j,k) = gamma * gamma1 * machinf * machinf
rhside.f:              coeff2 = 1.d0/(gamma1*machinf*machinf)
rhside.f:     $       bc_zeta_upper, reynolds, machinf, suther, tref, gamma,
roe_matrix.f:c       beta(i)         (gamma-1)/(2*c_(i)**2)
roe_matrix.f:     $     gamma, ronum
roe_matrix.f:     $     ve, we, psi, phi, theta, gamma1
roe_matrix.f:      gamma=control%gamma
roe_matrix.f:      gamma1 = gamma - 1.d0
roe_matrix.f:            c_(i) = dsqrt( gamma1*(caph_(i)-q_(i)-tk_(i)) )
roe_matrix.f:             c_(i) = dsqrt( gamma1*(caph_(i)-theta) )
roe_matrix.f:             c_(i) = dsqrt( gamma1*(caph_(i) - q_(i)) )
roe_matrix.f:         beta(i) = 0.5d0 * gamma1 / (c_(i)**2)
roe_matrix.f:         h_(i)   = c_(i)*c_(i)/gamma1
roe_matrix.f:      c1 = 1.d0 / gamma1
roe_matrixl.f:      subroutine roe_matrixl(index,imax, nl, delta, gamma, sqrtinv,
roe_matrixl.f:c       beta(i)         (gamma-1)/(2*c_(i)**2)
roe_matrixl.f:     $     delta(5), gamma
roe_matrixl.f:            c_(i) = dsqrt((gamma-1.d0)*(caph_(i)-q_(i)-tk_(i)))
roe_matrixl.f:            c_(i) = dsqrt((gamma-1.d0)*(caph_(i) - q_(i)))
roe_matrixl.f:         beta(i) = 0.5d0 * (gamma-1.d0) / (c_(i)**2)
roe_matrixl.f:         h_(i)   = c_(i)*c_(i)/(gamma-1.d0)
roe_matrixl.f:      c1 = 1.d0 / (gamma-1.d0)
roe_matrix_p.f:c       beta(i)         (gamma-1)/(2*c_(i)**2)
roe_matrix_p.f:     $     gamma, machinf,tref, prandtl,prt, reynolds,
roe_matrix_p.f:      gamma=control%gamma
roe_matrix_p.f:            beta(i) = 0.5d0 * (gamma-1.d0) / (c_(i)**2)
roe_matrix_p.f:            h_(i)   = c_(i)*c_(i)/(gamma-1.d0)
roe_matrix_p.f:               c_(i) = dsqrt((gamma-1.d0)*(caph_(i)-q_(i)-tk_(i)))
roe_matrix_p.f:               c_(i) = dsqrt((gamma-1.d0)*(caph_(i) - q_(i)))
roe_matrix_p.f:            beta(i) = 0.5d0 * (gamma-1.d0) / (c_(i)**2)
roe_matrix_p.f:            h_(i)   = c_(i)*c_(i)/(gamma-1.d0)
roe_matrix_p.f:                  cp_(i)=1.0/((gamma-1.0)*machinf**2)
roe_matrix_p.f:                  drhodp_(i)=gamma/c_(i)**2
source_1eq.f:     $     reynolds, tref, gamma, machinf, gamma1
source_1eq.f:      gamma=control%gamma
source_1eq.f:      gamma1=gamma-1.0
source_1eq.f:            t = gamma * gamma1 * machinf * machinf *
source_gravity.f:     $     reynolds, gamma, machinf, prandtl, precondition, 
source_gravity.f:     $     gamma,
source_gravity.f:      gamma=control%gamma
source_gravity.f:               p=(gamma-1.d0)*(q(i,j,k,5)-0.5*rho*(u**2+v**2+w**2))
source_gravity.f:               t = gamma*machinf**2*p/rho
sr_nri.f:     $                  gamma, q, bm, poutlet, mx2, sigma)
sr_nri.f:     $     gamma, poutlet, mx2, sigma(2),
sr_nri.f:     $     gamma1, rr, uu, vv, ww, qq, pp,
sr_nri.f:      gamma1 = gamma - 1.d0
sr_nri.f:        pv(5,l) = gamma1 * ( q(i,j,k,5) - pv(1,l) * qq )
sr_nri.f:      call gdout(gamma, xix, xiy, xiz, jcb, bxi, pv, pvpxi,
sr_nri.f:     >        vv * dxi(3) + ww * dxi(4) ) + dxi(5) / gamma1
sr_nri.f:     $                  gamma, q, am, poutlet, mx2, sigma)
sr_nri.f:     $     gamma, poutlet, mx2, sigma(2),
sr_nri.f:     $     gamma1, rr, uu, vv, ww, qq, pp, cc,
sr_nri.f:      gamma1 = gamma - 1.d0
sr_nri.f:        pv(5,l) = gamma1 * ( q(i,j,k,5) - pv(1,l) * qq )
sr_nri.f:      cc = dsqrt(gamma*pp/rr)
sr_nri.f:      call gdout(gamma, xix, xiy, xiz, jcb, bxi, pv, pvpxi,
sr_nri.f:     >          pdpv(5,1)/gamma1
sr_nri.f:     >          pdpv(5,2)/gamma1
sr_nri.f:     >          pdpv(5,3)/gamma1
sr_nri.f:     >          pdpv(5,4)/gamma1
sr_nri.f:     >          pdpv(5,5)/gamma1
sr_nri.f:      subroutine gdout(gamma, xix, xiy, xiz, jcb, bxi, pv, pvpxi,
sr_nri.f:     $     gamma, xix, xiy, xiz, jcb, bxi, pv(5,3), pvpxi(5),
sr_nri.f:     $     gamma1, rr, uu, vv, ww, pp, c2, cc, dpc, capu,
sr_nri.f:      gamma1 = gamma - 1.d0
sr_nri.f:      c2 = gamma * pp / rr
sr_nri.f:      c2 = gamma * pp / rr
sr_nri.f:      pppv(1) =  0.5d0*gamma1*qq
sr_nri.f:      pppv(2) = -gamma1*uu
sr_nri.f:      pppv(3) = -gamma1*vv
sr_nri.f:      pppv(4) = -gamma1*ww
sr_nri.f:      pppv(5) =  gamma1
sr_nri.f:     $                  gamma, q, mx2)
sr_nri.f:     $     gamma,
sr_nri.f:     $     gamma1, rr, uu, vv, ww, qq, pp,
sr_nri.f:      gamma1 = gamma - 1.d0
sr_nri.f:        pp = gamma1 * (q(i,j,k,5) - rr * qq)
sr_nri.f:        c2 = gamma * pp / rr
sr_nrj.f:     $                  gamma, q, bm, poutlet, mx2)
sr_nrj.f:     $     gamma, poutlet, mx2,
sr_nrj.f:     $     gamma1, rr, uu, vv, ww, qq, pp,
sr_nrj.f:      gamma1 = gamma - 1.d0
sr_nrj.f:        pv(5,l) = gamma1 * ( q(i,j,k,5) - pv(1,l) * qq )
sr_nrj.f:        call gdwall(gamma, xix, xiy, xiz, jcb, bxi, pv,
sr_nrj.f:        call gdsdu(gamma, xix, xiy, xiz, jcb, bxi, pv,
sr_nrj.f:     >        vv * dxi(3) + ww * dxi(4) ) + dxi(5) / gamma1
sr_nrj.f:     $                  gamma, q, am, poutlet, mx2)
sr_nrj.f:     $     gamma, poutlet, mx2,
sr_nrj.f:     $     gamma1, rr, uu, vv, ww, qq, pp, cc,
sr_nrj.f:      gamma1 = gamma - 1.d0
sr_nrj.f:        pv(5,l) = gamma1 * ( q(i,j,k,5) - pv(1,l) * qq )
sr_nrj.f:      cc = dsqrt(gamma*pp/rr)
sr_nrj.f:        call gdwall(gamma, xix, xiy, xiz, jcb, bxi, pv,
sr_nrj.f:        call gdsdu(gamma, xix, xiy, xiz, jcb, bxi, pv,
sr_nrj.f:     >          pdpv(5,1)/gamma1
sr_nrj.f:     >          pdpv(5,2)/gamma1
sr_nrj.f:     >          pdpv(5,3)/gamma1
sr_nrj.f:     >          pdpv(5,4)/gamma1
sr_nrj.f:     >          pdpv(5,5)/gamma1
sr_nrj.f:      subroutine gdwall(gamma, xix, xiy, xiz, jcb, bxi, pv, pvpxi,
sr_nrj.f:     $     gamma, xix, xiy, xiz, jcb, bxi, pv(5,3), pvpxi(5), alf
sr_nrj.f:     $     gamma1, rr, uu, vv, ww, pp, c2, cc, capu,
sr_nrj.f:      gamma1 = gamma - 1.d0
sr_nrj.f:        c2 = gamma * pp / rr
sr_nrj.f:        c2 = gamma * pp / rr
sr_nrj.f:        c2 = gamma * pp / rr
sr_nrj.f:        c2 = gamma * pp / rr
sr_nrj.f:      subroutine gdsdu(gamma, xix, xiy, xiz, jcb, bxi, pv, pvpxi,
sr_nrj.f:     $     gamma, xix, xiy, xiz, jcb, bxi, pv(5,3), pvpxi(5),
sr_nrj.f:     $     gamma1, rr, uu, vv, ww, pp, c2, cc, capu,
sr_nrj.f:      gamma1 = gamma - 1.d0
sr_nrj.f:        c2 = gamma * pp / rr
sr_nrj.f:        c2 = gamma * pp / rr
sr_nrj.f:        c2 = gamma * pp / rr
sr_nrj.f:        c2 = gamma * pp / rr
timestep.f:     $     gamma, machinf ,     ! specific heat ratio
timestep.f:     $     betap, alpha, capcpp, gamma1, psi, theta, qq
timestep.f:      gamma=control%gamma
timestep.f:      gamma1 = gamma - 1.d0
timestep.f:                  p = (gamma-1.d0)*(q(i,j,k,5)-q(i,j,k,6) -
timestep.f:                  p = (gamma-1.d0)*(q(i,j,k,5) - 0.5d0*rho*
timestep.f:                sound=dsqrt(gamma *p * rinv)
timestep.f:                temp=gamma*machinf**2*p/rho
timestep.f:                drhodp=gamma/sound**2
timestep.f:                cp=1.0/((gamma-1.0)*machinf**2)
timestep.f:                p = gamma1*( q(i,j,k,5)-q(i,j,k,6) - rho*qq )
timestep.f:                  p = gamma1*( q(i,j,k,5)-rho*theta )
timestep.f:                  p = gamma1*( q(i,j,k,5)-rho*qq )
timestep.f:              sound = dsqrt( (lx(i)**2+ly(i)**2+lz(i)**2) * gamma *
timestep.f:                       p = (gamma-1.d0)*(q(i,j,k,5)-q(i,j,k,6) -
timestep.f:                       p = (gamma-1.d0)*(q(i,j,k,5) - 0.5d0*rho*
timestep.f:                     sound=dsqrt(gamma *p * rinv)
timestep.f:                     temp=gamma*machinf**2*p/rho
timestep.f:                     drhodp=gamma/sound**2
timestep.f:                     cp=1.0/((gamma-1.0)*machinf**2)
timestep.f:                  p = gamma1*( q(i,j,k,5)-q(i,j,k,6)-rho*qq )
timestep.f:                    p = gamma1*( q(i,j,k,5)-rho*theta )
timestep.f:                    p = gamma1*( q(i,j,k,5)-rho*qq )
timestep.f:                sound = dsqrt((mx(j)**2+my(j)**2+mz(j)**2) * gamma *
timestep.f:                       p = (gamma-1.d0)*(q(i,j,k,5)-q(i,j,k,6) -
timestep.f:                       p = (gamma-1.d0)*(q(i,j,k,5) - 0.5d0*rho*
timestep.f:                     sound=dsqrt(gamma *p * rinv)
timestep.f:                     temp=gamma*machinf**2*p/rho
timestep.f:                     drhodp=gamma/sound**2
timestep.f:                     cp=1.0/((gamma-1.0)*machinf**2)
timestep.f:                   p = (gamma-1.d0)*(q(i,j,k,5)-q(i,j,k,6)-0.5d0*rho*
timestep.f:                     p = gamma1*( q(i,j,k,5)-rho*theta )
timestep.f:                     p = gamma1*( q(i,j,k,5)-rho*qq )
timestep.f:                 sound = dsqrt( (nx(k)**2+ny(k)**2+nz(k)**2) * gamma *
turb_line.f:     $     gamma, machinf, tref, reynolds, ronum
turb_line.f:      gamma=control%gamma
turb_line.f:        tw = gamma*(gamma-1.d0)*machinf*machinf *
turb_line.f:        tw = gamma*(gamma-1.d0)*machinf*machinf *
turb_new.f:     $     gamma, machinf, reynolds, tref, ronum
turb_new.f:      gamma=control%gamma
turb_new.f:                tmp = gamma * (gamma-1.d0) * machinf * machinf *
turb_new.f:                tmp = gamma * (gamma-1.d0) * machinf * machinf *
turb_rot.f:     $     gamma, machinf, reynolds, tref, ronum
turb_rot.f:      gamma=control%gamma
turb_rot.f:     >              vol, gamma, machinf, reynolds, tref, suther,
turb_rot.f:     $              vol, gamma, machinf, reynolds, tref, suther,
turbulencej.f:     $              vol, gamma, machinf, reynolds, tref, suther,
turbulencej.f:     $     gamma, machinf, reynolds, tref, ronum
turbulencej.f:      cf1 = gamma*( gamma-1.d0 )*machinf*machinf
turbulencej.f:     $              vol, gamma, machinf, reynolds, tref, suther,
turbulencej.f:     $     gamma, machinf, reynolds, tref, ronum
turbulencej.f:      cf1 = gamma*( gamma-1.d0 )*machinf*machinf
ursn_1.f:     $     gamma, prandtl, prt, tref, ptotal, ttotal,
ursn_1.f:      gamma=control%gamma
ursn_2.f:     $     gamma, prandtl, prt, tref, ptotal, ttotal,
ursn_2.f:      gamma=control%gamma
ursn.f:     $     gamma, prandtl, prt, tref, ptotal, ttotal,
ursn.f:      gamma=control%gamma
ursn.f:                     p=(gamma-1.0)*(q(i,j,k,5)-r*vel)
ursn.f:                     t=gamma*machinf**2*p/r
ursn.f:                     c=sqrt((gamma-1.0)*(th-vel))
ursn.f:                     drhodp=gamma/c**2
ursn.f:                     cp=1.d0/((gamma-1.0)*machinf**2)
urs_nri.f:      subroutine urs_nri(dt, x, y, z, q, q_n, q_bi, gamma, iter_gs,
urs_nri.f:     $     gamma, dt(il,jl,kl), tintvl, dual_time, pinlet,
urs_nri.f:     $              gamma, q, am, poutlet, mx2, sigma)
urs_nri.f:     $            gamma, q, am, pinlet, machinf, ptotal, ttotal,
urs_nrj.f:      subroutine urs_nrj(dt, x, y, z, q, q_n, q_bj, gamma, iter_gs,
urs_nrj.f:     $     gamma, dt(il,jl,kl), tintvl, dual_time, pinlet,
urs_nrj.f:     $                 gamma, q, am, poutlet, mx2)
urs_nrj.f:     $                gamma, q, am, poutlet, mx2)
wall_func.f:      subroutine wall_func(reynolds, machinf, suther, tref, gamma, q, x,
wall_func.f:     $     gamma,
wall_func.f:         t =gamma*(gamma-1.d0)*machinf*machinf*(e-tk-.5d0*(u*u+v*v+w*w))
wall_func.f:         t = gamma*(gamma-1.d0)*machinf*machinf*(e-.5d0*(u*u+v*v+w*w))
zha_matrix.f:     $     delta, gamma, ul, ur, vl, vr, wl, wr,rhol, rhor, 
zha_matrix.f:     $     delta(5), gamma
zha_matrix.f:      beta = gamma*(gamma-1.) 
zha_matrix.f:            temp1_l =mach_l*((gamma-1.)*ql(i) -pl(i)/rhol(i)
zha_matrix.f:            temp1_r =mach_r*((gamma-1.)*qr(i) -pr(i)/rhor(i)
zha_matrix.f:     >         + ul(i)*temp3_l - (gamma-1.)*ul(i)*mach_l )
zha_matrix.f:     >         + ur(i)*temp3_r - (gamma-1.)*ur(i)*mach_r) 
zha_matrix.f:     >         + vl(i)*temp3_l - (gamma-1.)*vl(i)*mach_l)
zha_matrix.f:     >         + vr(i)*temp3_r - (gamma-1.)*vr(i)*mach_r)
zha_matrix.f:     >         + wl(i)*temp3_l - (gamma-1.)*wl(i)*mach_l)
zha_matrix.f:     >         + wr(i)*temp3_r - (gamma-1.)*wr(i)*mach_r) 
zha_matrix.f:            temp7_l = (gamma-1.)*mach_l*(1.-
zha_matrix.f:     >          area*gamma*pl(i)/(4.*rhol(i)*c_l*c_interface))
zha_matrix.f:            temp7_r = (gamma-1.)*mach_r*(1.-
zha_matrix.f:     >          area*gamma*pr(i)/(4.*rhor(i)*c_r*c_interface)) 
zha_matrix.f:            temp7_l=c_interface + area*gamma*pl(i)/(4.*rhol(i)*c_l)
zha_matrix.f:            temp7_r=c_interface + area*gamma*pr(i)/(4.*rhor(i)*c_r)
zha_matrix.f:            dhat_l(i,5,1) = (gamma-1.)*ql(i)*c_interface
zha_matrix.f:            dhat_r(i,5,1) = (gamma-1.)*qr(i)*c_interface
zha_matrix.f:            dhat_l(i,5,2) = -(gamma-1.)*ul(i)*temp7_l 
zha_matrix.f:            dhat_r(i,5,2) = -(gamma-1.)*ur(i)*temp7_r
zha_matrix.f:            dhat_l(i,5,3) = -(gamma-1.)*vl(i)*temp7_l
zha_matrix.f:            dhat_r(i,5,3) = -(gamma-1.)*vr(i)*temp7_r
zha_matrix.f:            dhat_l(i,5,4) = -(gamma-1.)*wl(i)*temp7_l
zha_matrix.f:            dhat_r(i,5,4) = -(gamma-1.)*wr(i)*temp7_r
zha_matrix.f:            dhat_l(i,5,5) = (gamma-1.)*temp7_l + f*capu_l(i)
zha_matrix.f:            dhat_r(i,5,5) = (gamma-1.)*temp7_r + f*capu_r(i)
